// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: underwriting.proto

package loan_decision

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoanDecisionService_CreateLoanDecision_FullMethodName = "/loan_decision.LoanDecisionService/CreateLoanDecision"
	LoanDecisionService_GetLoanDecision_FullMethodName    = "/loan_decision.LoanDecisionService/GetLoanDecision"
)

// LoanDecisionServiceClient is the client API for LoanDecisionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LoanDecision service for interacting with loan decisions
type LoanDecisionServiceClient interface {
	CreateLoanDecision(ctx context.Context, in *CreateLoanDecisionRequest, opts ...grpc.CallOption) (*CreateLoanDecisionResponse, error)
	GetLoanDecision(ctx context.Context, in *GetLoanDecisionRequest, opts ...grpc.CallOption) (*GetLoanDecisionResponse, error)
}

type loanDecisionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanDecisionServiceClient(cc grpc.ClientConnInterface) LoanDecisionServiceClient {
	return &loanDecisionServiceClient{cc}
}

func (c *loanDecisionServiceClient) CreateLoanDecision(ctx context.Context, in *CreateLoanDecisionRequest, opts ...grpc.CallOption) (*CreateLoanDecisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLoanDecisionResponse)
	err := c.cc.Invoke(ctx, LoanDecisionService_CreateLoanDecision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanDecisionServiceClient) GetLoanDecision(ctx context.Context, in *GetLoanDecisionRequest, opts ...grpc.CallOption) (*GetLoanDecisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLoanDecisionResponse)
	err := c.cc.Invoke(ctx, LoanDecisionService_GetLoanDecision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanDecisionServiceServer is the server API for LoanDecisionService service.
// All implementations must embed UnimplementedLoanDecisionServiceServer
// for forward compatibility.
//
// LoanDecision service for interacting with loan decisions
type LoanDecisionServiceServer interface {
	CreateLoanDecision(context.Context, *CreateLoanDecisionRequest) (*CreateLoanDecisionResponse, error)
	GetLoanDecision(context.Context, *GetLoanDecisionRequest) (*GetLoanDecisionResponse, error)
	mustEmbedUnimplementedLoanDecisionServiceServer()
}

// UnimplementedLoanDecisionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoanDecisionServiceServer struct{}

func (UnimplementedLoanDecisionServiceServer) CreateLoanDecision(context.Context, *CreateLoanDecisionRequest) (*CreateLoanDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoanDecision not implemented")
}
func (UnimplementedLoanDecisionServiceServer) GetLoanDecision(context.Context, *GetLoanDecisionRequest) (*GetLoanDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanDecision not implemented")
}
func (UnimplementedLoanDecisionServiceServer) mustEmbedUnimplementedLoanDecisionServiceServer() {}
func (UnimplementedLoanDecisionServiceServer) testEmbeddedByValue()                             {}

// UnsafeLoanDecisionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanDecisionServiceServer will
// result in compilation errors.
type UnsafeLoanDecisionServiceServer interface {
	mustEmbedUnimplementedLoanDecisionServiceServer()
}

func RegisterLoanDecisionServiceServer(s grpc.ServiceRegistrar, srv LoanDecisionServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoanDecisionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoanDecisionService_ServiceDesc, srv)
}

func _LoanDecisionService_CreateLoanDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoanDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanDecisionServiceServer).CreateLoanDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanDecisionService_CreateLoanDecision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanDecisionServiceServer).CreateLoanDecision(ctx, req.(*CreateLoanDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanDecisionService_GetLoanDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanDecisionServiceServer).GetLoanDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanDecisionService_GetLoanDecision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanDecisionServiceServer).GetLoanDecision(ctx, req.(*GetLoanDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanDecisionService_ServiceDesc is the grpc.ServiceDesc for LoanDecisionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanDecisionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loan_decision.LoanDecisionService",
	HandlerType: (*LoanDecisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoanDecision",
			Handler:    _LoanDecisionService_CreateLoanDecision_Handler,
		},
		{
			MethodName: "GetLoanDecision",
			Handler:    _LoanDecisionService_GetLoanDecision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "underwriting.proto",
}

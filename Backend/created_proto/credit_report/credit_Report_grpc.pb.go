// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: credit_Report.proto

package credit_report

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CreditReportService_CreateCreditReport_FullMethodName = "/credit_report.CreditReportService/CreateCreditReport"
	CreditReportService_GetCreditReport_FullMethodName    = "/credit_report.CreditReportService/GetCreditReport"
)

// CreditReportServiceClient is the client API for CreditReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CreditReport service for interacting with credit reports
type CreditReportServiceClient interface {
	CreateCreditReport(ctx context.Context, in *CreateCreditReportRequest, opts ...grpc.CallOption) (*CreateCreditReportResponse, error)
	GetCreditReport(ctx context.Context, in *GetCreditReportRequest, opts ...grpc.CallOption) (*GetCreditReportResponse, error)
}

type creditReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditReportServiceClient(cc grpc.ClientConnInterface) CreditReportServiceClient {
	return &creditReportServiceClient{cc}
}

func (c *creditReportServiceClient) CreateCreditReport(ctx context.Context, in *CreateCreditReportRequest, opts ...grpc.CallOption) (*CreateCreditReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCreditReportResponse)
	err := c.cc.Invoke(ctx, CreditReportService_CreateCreditReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditReportServiceClient) GetCreditReport(ctx context.Context, in *GetCreditReportRequest, opts ...grpc.CallOption) (*GetCreditReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCreditReportResponse)
	err := c.cc.Invoke(ctx, CreditReportService_GetCreditReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditReportServiceServer is the server API for CreditReportService service.
// All implementations must embed UnimplementedCreditReportServiceServer
// for forward compatibility.
//
// CreditReport service for interacting with credit reports
type CreditReportServiceServer interface {
	CreateCreditReport(context.Context, *CreateCreditReportRequest) (*CreateCreditReportResponse, error)
	GetCreditReport(context.Context, *GetCreditReportRequest) (*GetCreditReportResponse, error)
	mustEmbedUnimplementedCreditReportServiceServer()
}

// UnimplementedCreditReportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreditReportServiceServer struct{}

func (UnimplementedCreditReportServiceServer) CreateCreditReport(context.Context, *CreateCreditReportRequest) (*CreateCreditReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCreditReport not implemented")
}
func (UnimplementedCreditReportServiceServer) GetCreditReport(context.Context, *GetCreditReportRequest) (*GetCreditReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditReport not implemented")
}
func (UnimplementedCreditReportServiceServer) mustEmbedUnimplementedCreditReportServiceServer() {}
func (UnimplementedCreditReportServiceServer) testEmbeddedByValue()                             {}

// UnsafeCreditReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditReportServiceServer will
// result in compilation errors.
type UnsafeCreditReportServiceServer interface {
	mustEmbedUnimplementedCreditReportServiceServer()
}

func RegisterCreditReportServiceServer(s grpc.ServiceRegistrar, srv CreditReportServiceServer) {
	// If the following call pancis, it indicates UnimplementedCreditReportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreditReportService_ServiceDesc, srv)
}

func _CreditReportService_CreateCreditReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCreditReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditReportServiceServer).CreateCreditReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditReportService_CreateCreditReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditReportServiceServer).CreateCreditReport(ctx, req.(*CreateCreditReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditReportService_GetCreditReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditReportServiceServer).GetCreditReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditReportService_GetCreditReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditReportServiceServer).GetCreditReport(ctx, req.(*GetCreditReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreditReportService_ServiceDesc is the grpc.ServiceDesc for CreditReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreditReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "credit_report.CreditReportService",
	HandlerType: (*CreditReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCreditReport",
			Handler:    _CreditReportService_CreateCreditReport_Handler,
		},
		{
			MethodName: "GetCreditReport",
			Handler:    _CreditReportService_GetCreditReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credit_Report.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: loan_Payment.proto

package loan_payment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoanPaymentService_CreateLoanPayment_FullMethodName = "/loan_payment.LoanPaymentService/CreateLoanPayment"
	LoanPaymentService_GetLoanPayment_FullMethodName    = "/loan_payment.LoanPaymentService/GetLoanPayment"
)

// LoanPaymentServiceClient is the client API for LoanPaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LoanPayment service for handling loan repayment transactions
type LoanPaymentServiceClient interface {
	CreateLoanPayment(ctx context.Context, in *CreateLoanPaymentRequest, opts ...grpc.CallOption) (*CreateLoanPaymentResponse, error)
	GetLoanPayment(ctx context.Context, in *GetLoanPaymentRequest, opts ...grpc.CallOption) (*GetLoanPaymentResponse, error)
}

type loanPaymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanPaymentServiceClient(cc grpc.ClientConnInterface) LoanPaymentServiceClient {
	return &loanPaymentServiceClient{cc}
}

func (c *loanPaymentServiceClient) CreateLoanPayment(ctx context.Context, in *CreateLoanPaymentRequest, opts ...grpc.CallOption) (*CreateLoanPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLoanPaymentResponse)
	err := c.cc.Invoke(ctx, LoanPaymentService_CreateLoanPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanPaymentServiceClient) GetLoanPayment(ctx context.Context, in *GetLoanPaymentRequest, opts ...grpc.CallOption) (*GetLoanPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLoanPaymentResponse)
	err := c.cc.Invoke(ctx, LoanPaymentService_GetLoanPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanPaymentServiceServer is the server API for LoanPaymentService service.
// All implementations must embed UnimplementedLoanPaymentServiceServer
// for forward compatibility.
//
// LoanPayment service for handling loan repayment transactions
type LoanPaymentServiceServer interface {
	CreateLoanPayment(context.Context, *CreateLoanPaymentRequest) (*CreateLoanPaymentResponse, error)
	GetLoanPayment(context.Context, *GetLoanPaymentRequest) (*GetLoanPaymentResponse, error)
	mustEmbedUnimplementedLoanPaymentServiceServer()
}

// UnimplementedLoanPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoanPaymentServiceServer struct{}

func (UnimplementedLoanPaymentServiceServer) CreateLoanPayment(context.Context, *CreateLoanPaymentRequest) (*CreateLoanPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoanPayment not implemented")
}
func (UnimplementedLoanPaymentServiceServer) GetLoanPayment(context.Context, *GetLoanPaymentRequest) (*GetLoanPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanPayment not implemented")
}
func (UnimplementedLoanPaymentServiceServer) mustEmbedUnimplementedLoanPaymentServiceServer() {}
func (UnimplementedLoanPaymentServiceServer) testEmbeddedByValue()                            {}

// UnsafeLoanPaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanPaymentServiceServer will
// result in compilation errors.
type UnsafeLoanPaymentServiceServer interface {
	mustEmbedUnimplementedLoanPaymentServiceServer()
}

func RegisterLoanPaymentServiceServer(s grpc.ServiceRegistrar, srv LoanPaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoanPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoanPaymentService_ServiceDesc, srv)
}

func _LoanPaymentService_CreateLoanPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoanPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanPaymentServiceServer).CreateLoanPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanPaymentService_CreateLoanPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanPaymentServiceServer).CreateLoanPayment(ctx, req.(*CreateLoanPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanPaymentService_GetLoanPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanPaymentServiceServer).GetLoanPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanPaymentService_GetLoanPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanPaymentServiceServer).GetLoanPayment(ctx, req.(*GetLoanPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanPaymentService_ServiceDesc is the grpc.ServiceDesc for LoanPaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanPaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loan_payment.LoanPaymentService",
	HandlerType: (*LoanPaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoanPayment",
			Handler:    _LoanPaymentService_CreateLoanPayment_Handler,
		},
		{
			MethodName: "GetLoanPayment",
			Handler:    _LoanPaymentService_GetLoanPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan_Payment.proto",
}

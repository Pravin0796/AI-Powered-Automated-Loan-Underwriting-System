// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: loan.proto

package loan

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoanService_ApplyForLoan_FullMethodName              = "/loan.LoanService/ApplyForLoan"
	LoanService_GetLoanStatus_FullMethodName             = "/loan.LoanService/GetLoanStatus"
	LoanService_GetLoanApplicationDetails_FullMethodName = "/loan.LoanService/GetLoanApplicationDetails"
	LoanService_GetAllLoanApplications_FullMethodName    = "/loan.LoanService/GetAllLoanApplications"
	LoanService_UpdateApplicationStatus_FullMethodName   = "/loan.LoanService/UpdateApplicationStatus"
	LoanService_GetLoanStats_FullMethodName              = "/loan.LoanService/GetLoanStats"
)

// LoanServiceClient is the client API for LoanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanServiceClient interface {
	ApplyForLoan(ctx context.Context, in *LoanRequest, opts ...grpc.CallOption) (*LoanResponse, error)
	GetLoanStatus(ctx context.Context, in *LoanStatusRequest, opts ...grpc.CallOption) (*LoanStatusResponse, error)
	GetLoanApplicationDetails(ctx context.Context, in *LoanApplicationRequest, opts ...grpc.CallOption) (*LoanApplicationResponse, error)
	GetAllLoanApplications(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LoanApplicationList, error)
	UpdateApplicationStatus(ctx context.Context, in *UpdateApplicationStatusRequest, opts ...grpc.CallOption) (*UpdateApplicationStatusResponse, error)
	GetLoanStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LoanStatsResponse, error)
}

type loanServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanServiceClient(cc grpc.ClientConnInterface) LoanServiceClient {
	return &loanServiceClient{cc}
}

func (c *loanServiceClient) ApplyForLoan(ctx context.Context, in *LoanRequest, opts ...grpc.CallOption) (*LoanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoanResponse)
	err := c.cc.Invoke(ctx, LoanService_ApplyForLoan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanServiceClient) GetLoanStatus(ctx context.Context, in *LoanStatusRequest, opts ...grpc.CallOption) (*LoanStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoanStatusResponse)
	err := c.cc.Invoke(ctx, LoanService_GetLoanStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanServiceClient) GetLoanApplicationDetails(ctx context.Context, in *LoanApplicationRequest, opts ...grpc.CallOption) (*LoanApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoanApplicationResponse)
	err := c.cc.Invoke(ctx, LoanService_GetLoanApplicationDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanServiceClient) GetAllLoanApplications(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LoanApplicationList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoanApplicationList)
	err := c.cc.Invoke(ctx, LoanService_GetAllLoanApplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanServiceClient) UpdateApplicationStatus(ctx context.Context, in *UpdateApplicationStatusRequest, opts ...grpc.CallOption) (*UpdateApplicationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateApplicationStatusResponse)
	err := c.cc.Invoke(ctx, LoanService_UpdateApplicationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanServiceClient) GetLoanStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LoanStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoanStatsResponse)
	err := c.cc.Invoke(ctx, LoanService_GetLoanStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanServiceServer is the server API for LoanService service.
// All implementations must embed UnimplementedLoanServiceServer
// for forward compatibility.
type LoanServiceServer interface {
	ApplyForLoan(context.Context, *LoanRequest) (*LoanResponse, error)
	GetLoanStatus(context.Context, *LoanStatusRequest) (*LoanStatusResponse, error)
	GetLoanApplicationDetails(context.Context, *LoanApplicationRequest) (*LoanApplicationResponse, error)
	GetAllLoanApplications(context.Context, *Empty) (*LoanApplicationList, error)
	UpdateApplicationStatus(context.Context, *UpdateApplicationStatusRequest) (*UpdateApplicationStatusResponse, error)
	GetLoanStats(context.Context, *Empty) (*LoanStatsResponse, error)
	mustEmbedUnimplementedLoanServiceServer()
}

// UnimplementedLoanServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoanServiceServer struct{}

func (UnimplementedLoanServiceServer) ApplyForLoan(context.Context, *LoanRequest) (*LoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyForLoan not implemented")
}
func (UnimplementedLoanServiceServer) GetLoanStatus(context.Context, *LoanStatusRequest) (*LoanStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanStatus not implemented")
}
func (UnimplementedLoanServiceServer) GetLoanApplicationDetails(context.Context, *LoanApplicationRequest) (*LoanApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanApplicationDetails not implemented")
}
func (UnimplementedLoanServiceServer) GetAllLoanApplications(context.Context, *Empty) (*LoanApplicationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLoanApplications not implemented")
}
func (UnimplementedLoanServiceServer) UpdateApplicationStatus(context.Context, *UpdateApplicationStatusRequest) (*UpdateApplicationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationStatus not implemented")
}
func (UnimplementedLoanServiceServer) GetLoanStats(context.Context, *Empty) (*LoanStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanStats not implemented")
}
func (UnimplementedLoanServiceServer) mustEmbedUnimplementedLoanServiceServer() {}
func (UnimplementedLoanServiceServer) testEmbeddedByValue()                     {}

// UnsafeLoanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanServiceServer will
// result in compilation errors.
type UnsafeLoanServiceServer interface {
	mustEmbedUnimplementedLoanServiceServer()
}

func RegisterLoanServiceServer(s grpc.ServiceRegistrar, srv LoanServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoanService_ServiceDesc, srv)
}

func _LoanService_ApplyForLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).ApplyForLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_ApplyForLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).ApplyForLoan(ctx, req.(*LoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanService_GetLoanStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).GetLoanStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_GetLoanStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).GetLoanStatus(ctx, req.(*LoanStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanService_GetLoanApplicationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).GetLoanApplicationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_GetLoanApplicationDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).GetLoanApplicationDetails(ctx, req.(*LoanApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanService_GetAllLoanApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).GetAllLoanApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_GetAllLoanApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).GetAllLoanApplications(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanService_UpdateApplicationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).UpdateApplicationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_UpdateApplicationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).UpdateApplicationStatus(ctx, req.(*UpdateApplicationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanService_GetLoanStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServiceServer).GetLoanStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanService_GetLoanStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServiceServer).GetLoanStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanService_ServiceDesc is the grpc.ServiceDesc for LoanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loan.LoanService",
	HandlerType: (*LoanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyForLoan",
			Handler:    _LoanService_ApplyForLoan_Handler,
		},
		{
			MethodName: "GetLoanStatus",
			Handler:    _LoanService_GetLoanStatus_Handler,
		},
		{
			MethodName: "GetLoanApplicationDetails",
			Handler:    _LoanService_GetLoanApplicationDetails_Handler,
		},
		{
			MethodName: "GetAllLoanApplications",
			Handler:    _LoanService_GetAllLoanApplications_Handler,
		},
		{
			MethodName: "UpdateApplicationStatus",
			Handler:    _LoanService_UpdateApplicationStatus_Handler,
		},
		{
			MethodName: "GetLoanStats",
			Handler:    _LoanService_GetLoanStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package credit_scoring

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CreditScoringServiceClient is the client API for CreditScoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreditScoringServiceClient interface {
	GetCreditScore(ctx context.Context, in *CreditScoreRequest, opts ...grpc.CallOption) (*CreditScoreResponse, error)
}

type creditScoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditScoringServiceClient(cc grpc.ClientConnInterface) CreditScoringServiceClient {
	return &creditScoringServiceClient{cc}
}

func (c *creditScoringServiceClient) GetCreditScore(ctx context.Context, in *CreditScoreRequest, opts ...grpc.CallOption) (*CreditScoreResponse, error) {
	out := new(CreditScoreResponse)
	err := c.cc.Invoke(ctx, "/credit_scoring.CreditScoringService/GetCreditScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditScoringServiceServer is the server API for CreditScoringService service.
// All implementations must embed UnimplementedCreditScoringServiceServer
// for forward compatibility
type CreditScoringServiceServer interface {
	GetCreditScore(context.Context, *CreditScoreRequest) (*CreditScoreResponse, error)
	mustEmbedUnimplementedCreditScoringServiceServer()
}

// UnimplementedCreditScoringServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCreditScoringServiceServer struct {
}

func (UnimplementedCreditScoringServiceServer) GetCreditScore(context.Context, *CreditScoreRequest) (*CreditScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditScore not implemented")
}
func (UnimplementedCreditScoringServiceServer) mustEmbedUnimplementedCreditScoringServiceServer() {}

// UnsafeCreditScoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditScoringServiceServer will
// result in compilation errors.
type UnsafeCreditScoringServiceServer interface {
	mustEmbedUnimplementedCreditScoringServiceServer()
}

func RegisterCreditScoringServiceServer(s grpc.ServiceRegistrar, srv CreditScoringServiceServer) {
	s.RegisterService(&CreditScoringService_ServiceDesc, srv)
}

func _CreditScoringService_GetCreditScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditScoringServiceServer).GetCreditScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/credit_scoring.CreditScoringService/GetCreditScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditScoringServiceServer).GetCreditScore(ctx, req.(*CreditScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreditScoringService_ServiceDesc is the grpc.ServiceDesc for CreditScoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreditScoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "credit_scoring.CreditScoringService",
	HandlerType: (*CreditScoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCreditScore",
			Handler:    _CreditScoringService_GetCreditScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/credit_Scoring.proto",
}

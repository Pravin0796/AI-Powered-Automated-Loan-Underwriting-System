// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v4.24.4
// source: credit_Report.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "credit_report";

/** CreateCreditReportRequest message for creating a credit report */
export interface CreateCreditReportRequest {
  /** User who the report belongs to */
  userId: number;
  /** Loan application for which the report is generated */
  loanApplicationId: number;
  /** Raw JSON or serialized report data */
  reportData: string;
  /** Credit score from the report */
  creditScore: number;
  /** Fraud indicators (JSON string) */
  fraudIndicators: string;
}

/** CreateCreditReportResponse message for response after creating a credit report */
export interface CreateCreditReportResponse {
  /** Unique ID of the created credit report */
  creditReportId: number;
  /** Status message (e.g., "Created successfully") */
  status: string;
}

/** GetCreditReportRequest message to request an existing credit report */
export interface GetCreditReportRequest {
  /** ID of the credit report to fetch */
  creditReportId: number;
}

/** GetCreditReportResponse message containing the credit report details */
export interface GetCreditReportResponse {
  /** Unique ID of the credit report */
  id: number;
  /** ID of the user to whom the report belongs */
  userId: number;
  /** ID of the loan application for which the report was generated */
  loanApplicationId: number;
  /** Raw JSON or serialized report data */
  reportData: string;
  /** Credit score from the report */
  creditScore: number;
  /** Fraud indicators (JSON string) */
  fraudIndicators: string;
  /** Timestamp when the report was generated */
  generatedAt: Date | undefined;
}

function createBaseCreateCreditReportRequest(): CreateCreditReportRequest {
  return { userId: 0, loanApplicationId: 0, reportData: "", creditScore: 0, fraudIndicators: "" };
}

export const CreateCreditReportRequest: MessageFns<CreateCreditReportRequest> = {
  encode(message: CreateCreditReportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).uint64(message.userId);
    }
    if (message.loanApplicationId !== 0) {
      writer.uint32(16).uint64(message.loanApplicationId);
    }
    if (message.reportData !== "") {
      writer.uint32(26).string(message.reportData);
    }
    if (message.creditScore !== 0) {
      writer.uint32(32).int32(message.creditScore);
    }
    if (message.fraudIndicators !== "") {
      writer.uint32(42).string(message.fraudIndicators);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCreditReportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCreditReportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.loanApplicationId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reportData = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.creditScore = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.fraudIndicators = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCreditReportRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      loanApplicationId: isSet(object.loanApplicationId) ? globalThis.Number(object.loanApplicationId) : 0,
      reportData: isSet(object.reportData) ? globalThis.String(object.reportData) : "",
      creditScore: isSet(object.creditScore) ? globalThis.Number(object.creditScore) : 0,
      fraudIndicators: isSet(object.fraudIndicators) ? globalThis.String(object.fraudIndicators) : "",
    };
  },

  toJSON(message: CreateCreditReportRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.loanApplicationId !== 0) {
      obj.loanApplicationId = Math.round(message.loanApplicationId);
    }
    if (message.reportData !== "") {
      obj.reportData = message.reportData;
    }
    if (message.creditScore !== 0) {
      obj.creditScore = Math.round(message.creditScore);
    }
    if (message.fraudIndicators !== "") {
      obj.fraudIndicators = message.fraudIndicators;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCreditReportRequest>, I>>(base?: I): CreateCreditReportRequest {
    return CreateCreditReportRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCreditReportRequest>, I>>(object: I): CreateCreditReportRequest {
    const message = createBaseCreateCreditReportRequest();
    message.userId = object.userId ?? 0;
    message.loanApplicationId = object.loanApplicationId ?? 0;
    message.reportData = object.reportData ?? "";
    message.creditScore = object.creditScore ?? 0;
    message.fraudIndicators = object.fraudIndicators ?? "";
    return message;
  },
};

function createBaseCreateCreditReportResponse(): CreateCreditReportResponse {
  return { creditReportId: 0, status: "" };
}

export const CreateCreditReportResponse: MessageFns<CreateCreditReportResponse> = {
  encode(message: CreateCreditReportResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creditReportId !== 0) {
      writer.uint32(8).uint64(message.creditReportId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCreditReportResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCreditReportResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.creditReportId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCreditReportResponse {
    return {
      creditReportId: isSet(object.creditReportId) ? globalThis.Number(object.creditReportId) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: CreateCreditReportResponse): unknown {
    const obj: any = {};
    if (message.creditReportId !== 0) {
      obj.creditReportId = Math.round(message.creditReportId);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCreditReportResponse>, I>>(base?: I): CreateCreditReportResponse {
    return CreateCreditReportResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCreditReportResponse>, I>>(object: I): CreateCreditReportResponse {
    const message = createBaseCreateCreditReportResponse();
    message.creditReportId = object.creditReportId ?? 0;
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseGetCreditReportRequest(): GetCreditReportRequest {
  return { creditReportId: 0 };
}

export const GetCreditReportRequest: MessageFns<GetCreditReportRequest> = {
  encode(message: GetCreditReportRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creditReportId !== 0) {
      writer.uint32(8).uint64(message.creditReportId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCreditReportRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCreditReportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.creditReportId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCreditReportRequest {
    return { creditReportId: isSet(object.creditReportId) ? globalThis.Number(object.creditReportId) : 0 };
  },

  toJSON(message: GetCreditReportRequest): unknown {
    const obj: any = {};
    if (message.creditReportId !== 0) {
      obj.creditReportId = Math.round(message.creditReportId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCreditReportRequest>, I>>(base?: I): GetCreditReportRequest {
    return GetCreditReportRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCreditReportRequest>, I>>(object: I): GetCreditReportRequest {
    const message = createBaseGetCreditReportRequest();
    message.creditReportId = object.creditReportId ?? 0;
    return message;
  },
};

function createBaseGetCreditReportResponse(): GetCreditReportResponse {
  return {
    id: 0,
    userId: 0,
    loanApplicationId: 0,
    reportData: "",
    creditScore: 0,
    fraudIndicators: "",
    generatedAt: undefined,
  };
}

export const GetCreditReportResponse: MessageFns<GetCreditReportResponse> = {
  encode(message: GetCreditReportResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.userId !== 0) {
      writer.uint32(16).uint64(message.userId);
    }
    if (message.loanApplicationId !== 0) {
      writer.uint32(24).uint64(message.loanApplicationId);
    }
    if (message.reportData !== "") {
      writer.uint32(34).string(message.reportData);
    }
    if (message.creditScore !== 0) {
      writer.uint32(40).int32(message.creditScore);
    }
    if (message.fraudIndicators !== "") {
      writer.uint32(50).string(message.fraudIndicators);
    }
    if (message.generatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.generatedAt), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCreditReportResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCreditReportResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.loanApplicationId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.reportData = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.creditScore = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fraudIndicators = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.generatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCreditReportResponse {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      loanApplicationId: isSet(object.loanApplicationId) ? globalThis.Number(object.loanApplicationId) : 0,
      reportData: isSet(object.reportData) ? globalThis.String(object.reportData) : "",
      creditScore: isSet(object.creditScore) ? globalThis.Number(object.creditScore) : 0,
      fraudIndicators: isSet(object.fraudIndicators) ? globalThis.String(object.fraudIndicators) : "",
      generatedAt: isSet(object.generatedAt) ? fromJsonTimestamp(object.generatedAt) : undefined,
    };
  },

  toJSON(message: GetCreditReportResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.loanApplicationId !== 0) {
      obj.loanApplicationId = Math.round(message.loanApplicationId);
    }
    if (message.reportData !== "") {
      obj.reportData = message.reportData;
    }
    if (message.creditScore !== 0) {
      obj.creditScore = Math.round(message.creditScore);
    }
    if (message.fraudIndicators !== "") {
      obj.fraudIndicators = message.fraudIndicators;
    }
    if (message.generatedAt !== undefined) {
      obj.generatedAt = message.generatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCreditReportResponse>, I>>(base?: I): GetCreditReportResponse {
    return GetCreditReportResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCreditReportResponse>, I>>(object: I): GetCreditReportResponse {
    const message = createBaseGetCreditReportResponse();
    message.id = object.id ?? 0;
    message.userId = object.userId ?? 0;
    message.loanApplicationId = object.loanApplicationId ?? 0;
    message.reportData = object.reportData ?? "";
    message.creditScore = object.creditScore ?? 0;
    message.fraudIndicators = object.fraudIndicators ?? "";
    message.generatedAt = object.generatedAt ?? undefined;
    return message;
  },
};

/** CreditReport service for interacting with credit reports */
export interface CreditReportService {
  CreateCreditReport(
    request: DeepPartial<CreateCreditReportRequest>,
    metadata?: grpc.Metadata,
  ): Promise<CreateCreditReportResponse>;
  GetCreditReport(
    request: DeepPartial<GetCreditReportRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCreditReportResponse>;
}

export class CreditReportServiceClientImpl implements CreditReportService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.CreateCreditReport = this.CreateCreditReport.bind(this);
    this.GetCreditReport = this.GetCreditReport.bind(this);
  }

  CreateCreditReport(
    request: DeepPartial<CreateCreditReportRequest>,
    metadata?: grpc.Metadata,
  ): Promise<CreateCreditReportResponse> {
    return this.rpc.unary(
      CreditReportServiceCreateCreditReportDesc,
      CreateCreditReportRequest.fromPartial(request),
      metadata,
    );
  }

  GetCreditReport(
    request: DeepPartial<GetCreditReportRequest>,
    metadata?: grpc.Metadata,
  ): Promise<GetCreditReportResponse> {
    return this.rpc.unary(
      CreditReportServiceGetCreditReportDesc,
      GetCreditReportRequest.fromPartial(request),
      metadata,
    );
  }
}

export const CreditReportServiceDesc = { serviceName: "credit_report.CreditReportService" };

export const CreditReportServiceCreateCreditReportDesc: UnaryMethodDefinitionish = {
  methodName: "CreateCreditReport",
  service: CreditReportServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return CreateCreditReportRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = CreateCreditReportResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const CreditReportServiceGetCreditReportDesc: UnaryMethodDefinitionish = {
  methodName: "GetCreditReport",
  service: CreditReportServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return GetCreditReportRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = GetCreditReportResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}

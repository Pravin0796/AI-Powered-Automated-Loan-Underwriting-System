// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v4.23.4
// source: loan.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";

export const protobufPackage = "loan";

/** Loan Service */

export interface LoanRequest {
  userId: number;
  amountRequested: number;
  loanTerm: number;
}

export interface LoanResponse {
  loanId: number;
  status: string;
}

export interface LoanStatusRequest {
  loanId: number;
}

export interface LoanStatusResponse {
  loanId: number;
  status: string;
}

function createBaseLoanRequest(): LoanRequest {
  return { userId: 0, amountRequested: 0, loanTerm: 0 };
}

export const LoanRequest: MessageFns<LoanRequest> = {
  encode(message: LoanRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).uint64(message.userId);
    }
    if (message.amountRequested !== 0) {
      writer.uint32(17).double(message.amountRequested);
    }
    if (message.loanTerm !== 0) {
      writer.uint32(24).int32(message.loanTerm);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoanRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoanRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.amountRequested = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.loanTerm = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoanRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      amountRequested: isSet(object.amountRequested) ? globalThis.Number(object.amountRequested) : 0,
      loanTerm: isSet(object.loanTerm) ? globalThis.Number(object.loanTerm) : 0,
    };
  },

  toJSON(message: LoanRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.amountRequested !== 0) {
      obj.amountRequested = message.amountRequested;
    }
    if (message.loanTerm !== 0) {
      obj.loanTerm = Math.round(message.loanTerm);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoanRequest>, I>>(base?: I): LoanRequest {
    return LoanRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoanRequest>, I>>(object: I): LoanRequest {
    const message = createBaseLoanRequest();
    message.userId = object.userId ?? 0;
    message.amountRequested = object.amountRequested ?? 0;
    message.loanTerm = object.loanTerm ?? 0;
    return message;
  },
};

function createBaseLoanResponse(): LoanResponse {
  return { loanId: 0, status: "" };
}

export const LoanResponse: MessageFns<LoanResponse> = {
  encode(message: LoanResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.loanId !== 0) {
      writer.uint32(8).uint64(message.loanId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoanResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoanResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.loanId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoanResponse {
    return {
      loanId: isSet(object.loanId) ? globalThis.Number(object.loanId) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: LoanResponse): unknown {
    const obj: any = {};
    if (message.loanId !== 0) {
      obj.loanId = Math.round(message.loanId);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoanResponse>, I>>(base?: I): LoanResponse {
    return LoanResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoanResponse>, I>>(object: I): LoanResponse {
    const message = createBaseLoanResponse();
    message.loanId = object.loanId ?? 0;
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseLoanStatusRequest(): LoanStatusRequest {
  return { loanId: 0 };
}

export const LoanStatusRequest: MessageFns<LoanStatusRequest> = {
  encode(message: LoanStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.loanId !== 0) {
      writer.uint32(8).uint64(message.loanId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoanStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoanStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.loanId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoanStatusRequest {
    return { loanId: isSet(object.loanId) ? globalThis.Number(object.loanId) : 0 };
  },

  toJSON(message: LoanStatusRequest): unknown {
    const obj: any = {};
    if (message.loanId !== 0) {
      obj.loanId = Math.round(message.loanId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoanStatusRequest>, I>>(base?: I): LoanStatusRequest {
    return LoanStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoanStatusRequest>, I>>(object: I): LoanStatusRequest {
    const message = createBaseLoanStatusRequest();
    message.loanId = object.loanId ?? 0;
    return message;
  },
};

function createBaseLoanStatusResponse(): LoanStatusResponse {
  return { loanId: 0, status: "" };
}

export const LoanStatusResponse: MessageFns<LoanStatusResponse> = {
  encode(message: LoanStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.loanId !== 0) {
      writer.uint32(8).uint64(message.loanId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoanStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoanStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.loanId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoanStatusResponse {
    return {
      loanId: isSet(object.loanId) ? globalThis.Number(object.loanId) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: LoanStatusResponse): unknown {
    const obj: any = {};
    if (message.loanId !== 0) {
      obj.loanId = Math.round(message.loanId);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoanStatusResponse>, I>>(base?: I): LoanStatusResponse {
    return LoanStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoanStatusResponse>, I>>(object: I): LoanStatusResponse {
    const message = createBaseLoanStatusResponse();
    message.loanId = object.loanId ?? 0;
    message.status = object.status ?? "";
    return message;
  },
};

export interface LoanService {
  ApplyForLoan(request: DeepPartial<LoanRequest>, metadata?: grpc.Metadata): Promise<LoanResponse>;
  GetLoanStatus(request: DeepPartial<LoanStatusRequest>, metadata?: grpc.Metadata): Promise<LoanStatusResponse>;
}

export class LoanServiceClientImpl implements LoanService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.ApplyForLoan = this.ApplyForLoan.bind(this);
    this.GetLoanStatus = this.GetLoanStatus.bind(this);
  }

  ApplyForLoan(request: DeepPartial<LoanRequest>, metadata?: grpc.Metadata): Promise<LoanResponse> {
    return this.rpc.unary(LoanServiceApplyForLoanDesc, LoanRequest.fromPartial(request), metadata);
  }

  GetLoanStatus(request: DeepPartial<LoanStatusRequest>, metadata?: grpc.Metadata): Promise<LoanStatusResponse> {
    return this.rpc.unary(LoanServiceGetLoanStatusDesc, LoanStatusRequest.fromPartial(request), metadata);
  }
}

export const LoanServiceDesc = { serviceName: "loan.LoanService" };

export const LoanServiceApplyForLoanDesc: UnaryMethodDefinitionish = {
  methodName: "ApplyForLoan",
  service: LoanServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return LoanRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = LoanResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const LoanServiceGetLoanStatusDesc: UnaryMethodDefinitionish = {
  methodName: "GetLoanStatus",
  service: LoanServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return LoanStatusRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = LoanStatusResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
